import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin

# Payloads
xss_payload = "<script>alert('XSS')</script>"
sqli_payload = "' OR '1'='1"

# Get all forms from a web page
def get_all_forms(url):
    try:
        response = requests.get(url)
        soup = BeautifulSoup(response.content, "html.parser")
        return soup.find_all("form")
    except Exception as e:
        print(f"[!] Error fetching forms: {e}")
        return []

# Extract form details
def get_form_details(form):
    details = {
        "action": form.attrs.get("action", ""),
        "method": form.attrs.get("method", "get").lower(),
        "inputs": []
    }

    for input_tag in form.find_all("input"):
        name = input_tag.attrs.get("name")
        input_type = input_tag.attrs.get("type", "text")
        value = input_tag.attrs.get("value", "")
        details["inputs"].append({"name": name, "type": input_type, "value": value})

    return details

# Submit a form with a custom payload
def submit_form(form_details, base_url, payload):
    target_url = urljoin(base_url, form_details["action"])
    data = {}
    for input_field in form_details["inputs"]:
        if input_field["type"] == "text":
            data[input_field["name"]] = payload
        else:
            data[input_field["name"]] = input_field["value"]
    
    if form_details["method"] == "post":
        return requests.post(target_url, data=data)
    else:
        return requests.get(target_url, params=data)

# Test for XSS
def scan_xss(url):
    print("\n[+] Scanning for XSS...")
    forms = get_all_forms(url)
    for form in forms:
        form_details = get_form_details(form)
        response = submit_form(form_details, url, xss_payload)
        if xss_payload in response.text:
            print("[!!] XSS vulnerability detected!")
            print(f"URL: {urljoin(url, form_details['action'])}")
        else:
            print("[-] No XSS vulnerability found in this form.")

# Test for SQL Injection
def scan_sqli(url):
    print("\n[+] Scanning for SQL Injection...")
    test_url = f"{url}?id={sqli_payload}"
    try:
        response = requests.get(test_url)
        errors = ["sql syntax", "mysql", "syntax error", "unclosed quotation", "ODBC", "ORA-"]
        if any(error in response.text.lower() for error in errors):
            print("[!!] SQL Injection vulnerability detected!")
            print(f"Payload: {sqli_payload}")
            print(f"URL: {test_url}")
        else:
            print("[-] No SQL Injection vulnerability detected.")
    except Exception as e:
        print(f"[!] Error during SQLi test: {e}")

# Main function
if __name__ == "__main__":
    target = input("Enter the target URL (e.g., http://testphp.vulnweb.com): ").strip()
    if not target.startswith("http"):
        target = "http://" + target

    scan_xss(target)
    scan_sqli(target)